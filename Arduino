//==============================================================
//====================== import libraries ======================
//==============================================================
#include <Process.h>

// include SPI, MP3 and SD libraries
#include <SPI.h>
#include <Adafruit_VS1053.h>
#include <SD.h>

//==============================================================
//====================== declare cnstants ======================
//==============================================================
// define the pins used
//#define CLK 13       // SPI Clock, shared with SD card
//#define MISO 12      // Input data, from VS1053/SD card
//#define MOSI 11      // Output data, to VS1053/SD card
#define RESET 9      // VS1053 reset pin (output)
#define CS 10        // VS1053 chip select pin (output)
#define DCS 8        // VS1053 Data/command select pin (output)
#define DREQ 3       // VS1053 Data request pin (into Arduino)
#define CARDCS 4     // Card chip select pin

Adafruit_VS1053_FilePlayer musicPlayer = Adafruit_VS1053_FilePlayer(RESET, CS, DCS, DREQ, CARDCS);
// Alternately, use 'soft SPI'. Requires Adafruit's flexible SD library
// Adafruit_VS1053_FilePlayer musicPlayer = Adafruit_VS1053_FilePlayer(MOSI, MISO, CLK, RESET, CS, DCS, DREQ, CARDCS);

#define button 7

//==============================================================
//====================== global variables ======================
//==============================================================
//------- for time management -------
Process UNIXdate; // process used to get the date
long UNIXtime; // for the results
long lastUNIXtime = -1; // need an impossible value for comparison


//------- for tone management -------
int currentButtonState = 0;
int lastButtonState = 0;
int nextToneNumber = 0;
long lastTimeGetData = 0;
boolean toneOn = false;
long nextAlarmTime = 0;


//=====================================================
//====================== setup() ======================
//=====================================================
void setup() {
  Serial.begin(9600);
  while(!Serial);
  pinMode(button, INPUT);

  //------------------ for musicPlayer library ------------------
  // initialise the music player
  if (!musicPlayer.begin()) {
    Serial.println("VS1053 not found");
    while (1);  // don't do anything more
  }
  musicPlayer.sineTest(0x44, 500);    // Make a tone to indicate VS1053 is working
  if (!SD.begin(CARDCS)) {
    Serial.println("SD failed, or not present");
    while (1);  // don't do anything more
  }
  Serial.println("SD OK!");
  // Set volume for left, right channels. lower numbers == louder volume!
  musicPlayer.setVolume(10,10);
  if (! musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT)) {
    Serial.println("DREQ pin is not an interrupt pin");
  }
  
  //------------------ for bidge library ------------------
  Bridge.begin();
  
  //download data from web
  downloadData();
  
   // run an initial date process.
  if (!UNIXdate.running())  {
    UNIXdate.begin("date");
    UNIXdate.addParameter("+%s");
    UNIXdate.run();
  }
}



//====================================================
//====================== loop() ======================
//====================================================
void loop() {
  timeCheck();
  alarmCheck();
  if(toneOn == true) {
    playTone();
  }
}

//==========================================================
//====================== alarmCheck() ======================
//==========================================================

void alarmCheck() {
  Serial.println(UNIXtime - nextAlarmTime);
  if((UNIXtime - nextAlarmTime >= 0) && (UNIXtime - nextAlarmTime < 60) && (UNIXtime != 0) && (nextAlarmTime != 0)) {
    toneOn = true;
    musicPlayer.setVolume(10,10);
    Serial.println("toneOn becomes true");
  }
  
  if(nextAlarmTime == 0){
    downloadData();
  }
}



//=========================================================
//====================== timeCheck() ======================
//=========================================================
void timeCheck() {
  if (lastUNIXtime != UNIXtime) { // if a second has passed
    Serial.println(UNIXtime);
    if (!UNIXdate.running())  {
      UNIXdate.begin("date");
      UNIXdate.addParameter("+%s");
      UNIXdate.run();
    }
  }

  //if there's a result from the date process, parse it:
  while (UNIXdate.available() > 0) {
    //Serial.println("now reading UNIXtime from web");
    String UNIXtimeString = UNIXdate.readString();    // get the result of the date process
    lastUNIXtime = UNIXtime;  // save to do a time comparison
    UNIXtime = UNIXtimeString.toInt(); // convert to ints
  }
}


//========================================================
//====================== playTone() ======================
//========================================================
void playTone() {
  
  switch (nextToneNumber) {
    case 1:
      // Start playing a file, then we can do stuff while waiting for it to finish
      if (! musicPlayer.startPlayingFile("Avicii.mp3")) {
        Serial.println("Could not open file");
        return;
      }
      break;
    case 2:
      if (! musicPlayer.startPlayingFile("Kanye.mp3")) {
        Serial.println("Could not open file");
        return;
      }
      break;
    case 3:
      if (! musicPlayer.startPlayingFile("Arcade.mp3")) {
        Serial.println("Could not open file");
        return;
      }
      break;
    case 4:
      if (! musicPlayer.startPlayingFile("Wham.mp3")) {
        Serial.println("Could not open file");
        return;
      }
      break;
  }

  
  while (musicPlayer.playingMusic) {
    currentButtonState = digitalRead(button);
    if (currentButtonState == HIGH && lastButtonState == LOW) {
      Serial.println("tone is muted");
      musicPlayer.setVolume(200,200);
      toneOn = false;
      downloadData();
      goto bailout;
    }
    lastButtonState = currentButtonState;
  }
  bailout:
  
  Serial.println(" ");
  
}

//============================================================
//====================== downloadData() ======================
//============================================================
void downloadData() {
  Process p;        // Create a process and call it "p"
  p.begin("curl");  // Process that launch the "curl" command
  p.addParameter("http://s5885.com/napchat/showDBcontents3.php"); // Add the URL parameter to "curl"
  p.run();      // Run the process and wait for its termination
  
  String downloadedText;
  // A process output can be read with the stream methods
  while (p.available() > 0) {
    char c = p.read();
    Serial.print(c);
    downloadedText += c;
    //toneNumber = c - '0';
  }
  // Ensure the last bit of data is sent.
  Serial.flush();

  Serial.println(" ");
  String content = downloadedText.substring(0, 1);
  nextToneNumber = content.toInt();
  Serial.println(nextToneNumber);
  String content2 = downloadedText.substring(2, downloadedText.length());
  nextAlarmTime = content2.toInt();
  Serial.println(nextAlarmTime);
  
  delay(100);
}

